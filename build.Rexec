#!/usr/bin/env Rscript

# config #######################################################################
src = "src"
dest = "docs"

# worker function
knitIt = function(f, dev, src, dest) {
  messagef("Knitting file '%s' ...", f)
  lines = readLines(file.path(src, f))

  # apply replacement macros
  for (macro in macros)
    lines = str_replace_all(lines, macro$pattern, macro$replacement)

  # should we append the full source code at the end?
  # to opt out add this to the yaml front matter
  # params:
  #  full.code: FALSE
  ## knit.params = knit_params(lines)
  ## if (!isFALSE(knit.params$full.code$value) && dev != "pdf") {
  ##   lines = c(
  ##     lines, "\n",
  ##     "## Complete code listing", "\n",
  ##     "The above code without the output is given below:", "\n",
  ##     "```{r, purl=FALSE, echo = FALSE, comment=''}",
  ##     paste0("cat(readLines('./",file.path("full_code_src", str_replace(f, "\\.Rmd$", "\\.R")),"'),fill = 2)"),
  ##     "```")
  ## }

  cache.path = file.path("cache", f, "")
  opts_chunk$set(cache = TRUE, cache.path = cache.path, fig.path = file.path("figure", dev, str_replace(f, "\\.Rmd", ""), ""), dev = dev, error = FALSE, comment = "#>", collapse = TRUE)
  setSeed(f)

  # FIXME: remove if mkdocs handles this, currently mkdocs puts yaml front matter in the output.
  yaml.lines = which(lines == "---")
  if (length(yaml.lines == 2)) {
    lines = lines[-1 * seq(from = yaml.lines[1], to = yaml.lines[2])]
  }

  knit(
    text = lines,
    output = file.path(dev, dest, str_replace(f, "\\.Rmd$", "\\.md")),
    quiet = TRUE
  )
}

# helper function to extract the source code


# create output directories for pdf and svg devices
if (!isDirectory("svg") | !isDirectory(file.path("svg", "docs")))
  dir.create(file.path("svg", "docs"), recursive = TRUE)
if (!isDirectory("pdf") | !isDirectory(file.path("pdf", "docs")))
  dir.create(file.path("pdf", "docs"), recursive = TRUE)
if (!isDirectory("full_code_src"))
  dir.create(file.path("full_code_src"))

## Handle mlr Versions ####

# if we have a new mlr version move old devel files into version directory
mlr.version = as.character(packageVersion("mlr"))
link = Sys.readlink(mlr.version)
if (is.na(link)) {
  # find the directory that linked to devel before and copy devel content to it.
  old.version = names(which(sapply(list.files(".", pattern = "\\d\\..*", include.dirs = TRUE), Sys.readlink) == "devel"))
  file.remove(old.version)
  dir.create(old.version)
  system(sprintf("cp -r devel/* %s", old.version))
  # this old.version is probably the latest release so change this link to
  file.remove("release")
  file.symlink(old.version, "release")
  # No directory or link for the new version exists so we create one
  file.symlink("devel", mlr.version)
  # Take care of github on Travis
  if (ontravis) {
    system(sprintf("git add %s", paste(mlr.version, old.version, "devel", "release")))
  }
} else if (link == "") {
  # The directory exists but is not a link
  warning("You are building the tutorial with an outdated mlr version! Please use the github version!")
} else if (link != "devel") {
  stopf("The directory %s should link to devel and not to %s", mlr.version, link)
}

## Do the building ####

# do lapply for now. with mclapply it seems unclear how to stop best on error. this was 100% broken before
message("Building purl version...")
dummy = lapply(list.files(src, pattern = "\\.Rmd$"), purlIt, "full_code_src")
message("Building PDF version...")
dummy = lapply(list.files(src, pattern = "\\.Rmd$"), knitIt, "pdf")
ok = system3("./build-pdf.py")
if (ok$exit.code == 0L) {
  # copy pdf to devel
  ok = file.copy("mlr-tutorial-build.pdf", file.path("devel", "mlr-tutorial.pdf"), overwrite = TRUE)
   if (!ok) {
    stop("copy pdf failed.")
  }
  # embed images in HTML
  opts_knit$set(upload.fun = image_uri)
  message("Building HTML version...")
  dummy = lapply(list.files(src, pattern = "\\.Rmd$"), knitIt, "svg")
  ok = system3("mkdocs", "build")
  message("Build successful!")
  message("Now zip everything!")
  setwd("devel/html/")
  suppressAll(zip("../mlr_tutorial.zip", files = "."))
  setwd("../../")
  exit(0L)
}

messagef("Build failed!")
exit(ok$exit.code)

# vim: set ft=r:

